# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      

    - name: Pull Docker images
      run: |
          docker pull lenartl/webshop-backend:sprint-1
          docker pull lenartl/webshop-frontend:sprint-1
          docker pull mysql:8.0.36

    - name: Run MySQL container
      run: |
          docker run -d --name mysql-container \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=mydb \
            mysql:5.7

    - name: Run Backend container
      run: |
          docker run -d --name backend-container \
            -p 8080:8080 \
            lenartl/webshop-backend:sprint-1

    - name: Run Frontend container
      run: |
          docker run -d --name frontend-container \
            -p 80:80 \
            lenartl/webshop-frontend:sprint-1

    - name: Check running containers
      run: docker ps


    - name: Check running containers
      run: |
        docker ps --format "{{.Names}}"

    - name: Check1 running containers
      run: |
        docker ps --filter 'status=running'
        
    - name: Test with pytest
      env:
        FRONTEND_URL: http://localhost:4200
        BACKEND_URL: http://localhost:8080
        host: localhost
        port: 3306
        user: root
        password: test1234
        database: webshop
      run: |
        pytest --alluredir=allure-results

    - name: Allure Report action from marketplace
      if: always()
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: allure-results
        allure_history: allure-history
        keep_reports: 20

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history
