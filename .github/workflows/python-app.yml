name: ProgMusix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Build and run Docker Compose
      run: |
        docker-compose -f compose.yaml up -d
        docker-compose -f compose.yaml ps

    - name: Wait for all services to be healthy
      run: |
        services=("database" "backend" "frontend")
        for service in "${services[@]}"; do
          for i in {1..10}; do
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' $service)" == "\"healthy\"" ]; then
              echo "$service is healthy."
              break
            else
              echo "Waiting for $service to be healthy..."
              sleep 10
            fi
          done
          if [ "$(docker inspect --format='{{json .State.Health.Status}}' $service)" != "\"healthy\"" ]; then
            echo "$service did not become healthy in time."
            exit 1
          fi
        done


    - name: Check running containers
      run: docker-compose -f compose.yaml ps

    - name: Copy init file to Docker container
      run: |
        docker cp init.sql database:/init.sql

    - name: Load init.sql into MySQL database
      run: |
        docker-compose exec database mysql -u root -ptest1234 webshop < ./init.sql

    


    - name: Test with pytest
      env:
        FRONTEND_URL: http://localhost:4200
        BACKEND_URL: http://localhost:8080
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USER: root
        DATABASE_PASSWORD: test1234
        DATABASE_NAME: webshop
      run: |
        pytest test_ProgMusix.py --alluredir=allure-results || true
        
    - name: Install Newman
      run: npm install -g newman


    - name: Run Postman collection with Newman
      run: |
        newman run Postman/postman_collection.json \
        --environment Postman/postman_environment.json \
        --reporters cli,json \
        --reporter-json-export Postman/reports/report.json

    - name: Extract tokens from report and set as environment variables
      run: |
        access_token=$(jq -r '.run.executions[0].response.stream | fromjson | .access_token' Postman/reports/report.json)
        refresh_token=$(jq -r '.run.executions[0].response.stream | fromjson | .refresh_token' Postman/reports/report.json)
        echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
        echo "REFRESH_TOKEN=$refresh_token" >> $GITHUB_ENV

    - name: Check current working directory
      run: pwd
        
    - name: Allure Report action from marketplace
      if: always()
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: allure-results
        allure_history: allure-history
        keep_reports: 20

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history

  #  - name: Docker compose down
   #   if: always() 
   #   run: |
   #     docker-compose -f compose.yaml down
