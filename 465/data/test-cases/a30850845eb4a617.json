{"uid":"a30850845eb4a617","name":"test_reg_invalid_password","fullName":"Tests.test_ProgMusix.TestProgmusix#test_reg_invalid_password","historyId":"f49b15c532cbff00e4b0862cef539f77","time":{"start":1726062713302,"stop":1726062713365,"duration":63},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n#0 0x5555586ad86a <unknown>\n#1 0x55555837bc91 <unknown>\n#2 0x5555583cc92f <unknown>\n#3 0x5555583c04d6 <unknown>\n#4 0x5555583f0492 <unknown>\n#5 0x5555583bfe89 <unknown>\n#6 0x5555583f065e <unknown>\n#7 0x55555840e9c6 <unknown>\n#8 0x5555583f0233 <unknown>\n#9 0x5555583be093 <unknown>\n#10 0x5555583bf09e <unknown>\n#11 0x555558674acb <unknown>\n#12 0x555558678a81 <unknown>\n#13 0x555558660695 <unknown>\n#14 0x5555586795f2 <unknown>\n#15 0x55555864586f <unknown>\n#16 0x55555869c668 <unknown>\n#17 0x55555869c832 <unknown>\n#18 0x5555586ac65c <unknown>\n#19 0x7f6df3494ac3 <unknown>","statusTrace":"self = <Tests.test_ProgMusix.TestProgmusix object at 0x7f9ad6500820>\n\n    def test_reg_invalid_password(self):\n>       self.page.registration_invalid_password()\n\nTests/test_ProgMusix.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nProgMusix/page_model.py:318: in registration_invalid_password\n    self.menu_login_btn()\nProgMusix/page_model.py:20: in menu_login_btn\n    return self.browser.find_element(By.XPATH, '//button[@id=\"regLogin\"]').click()\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9ad6585210>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55555869c832 \\\\u003Cunknown>\\\\n#18 0x5555586ac65c \\\\u003Cunknown>\\\\n#19 0x7f6df3494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       #0 0x5555586ad86a <unknown>\nE       #1 0x55555837bc91 <unknown>\nE       #2 0x5555583cc92f <unknown>\nE       #3 0x5555583c04d6 <unknown>\nE       #4 0x5555583f0492 <unknown>\nE       #5 0x5555583bfe89 <unknown>\nE       #6 0x5555583f065e <unknown>\nE       #7 0x55555840e9c6 <unknown>\nE       #8 0x5555583f0233 <unknown>\nE       #9 0x5555583be093 <unknown>\nE       #10 0x5555583bf09e <unknown>\nE       #11 0x555558674acb <unknown>\nE       #12 0x555558678a81 <unknown>\nE       #13 0x555558660695 <unknown>\nE       #14 0x5555586795f2 <unknown>\nE       #15 0x55555864586f <unknown>\nE       #16 0x55555869c668 <unknown>\nE       #17 0x55555869c832 <unknown>\nE       #18 0x5555586ac65c <unknown>\nE       #19 0x7f6df3494ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestProgmusix","time":{"start":1726062712290,"stop":1726062713302,"duration":1012},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestProgmusix::0","time":{"start":1726062713528,"stop":1726062713528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_ProgMusix"},{"name":"subSuite","value":"TestProgmusix"},{"name":"host","value":"fv-az1061-685"},{"name":"thread","value":"3758-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_ProgMusix"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a30850845eb4a617.json","parameterValues":[]}